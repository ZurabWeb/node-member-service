service: members-service

custom:
  tableName: 'users-table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  generateUser:
    handler: index.handler
    events:
      - http: 'GET /users/generate'
  getUser:
    handler: index.handler
    events:
      - http: 'GET /users/{id+}'
  createUser:
    handler: index.handler
    events:
      - http: 'POST /users'
  updateUser:
    handler: index.handler
    events:
      - http: 'PUT /users/{id+}'
  deleteUser:
    handler: index.handler
    events:
      - http: 'DELETE /users/{id+}'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    ApiGatewayRestApi:
      Properties:
        Body:
          ${file(swagger.yaml)}

plugins:
  - serverless-offline